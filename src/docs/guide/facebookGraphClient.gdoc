{warning}
WARNING: Since V2.1.0, @FacebookGraphClient@ constructor has changed with a new @apiVersion@ parameter (default to V2.1).
{code}
// From
FacebookGraphClient(String accessToken = '', Integer timeout = DEFAULT_READ_TIMEOUT_IN_MS, String proxyHost = null, Integer proxyPort = null) {
// To
FacebookGraphClient(String accessToken = '', String apiVersion = DEFAULT_API_VERSION, Integer timeout = DEFAULT_READ_TIMEOUT_IN_MS, String proxyHost = null, Integer proxyPort = null) {
{code}
{warning}


To perform Facebook Graph API call, use the @FacebookGraphClient@ without access token for public data or with an access token for private data.
@FacebookGraphClient@ is a thin groovy wrapper around the rock solid "RestFB java library":http://restfb.com/ .
It will return JSON-based graph objects.

To play with the API, you might use the grails console from your project root and get user token or app token from "Facebook Access Token Tool":https://developers.facebook.com/tools/access_token/ .

{code}
grails console
{code}

h3. Initialization

{code}
// For public data
def facebookClient = facebookGraphClientService.newClient()

// For private data (access token required)
def userAccessToken = facebookAppService.getUserAccessToken() // Or any app/user token
def facebookClient = new FacebookGraphClient(userAccessToken)

// With specific api version
def facebookClient = new FacebookGraphClient(userAccessToken, 'v1.0')

// With specific timeout (default to 180s)
def facebookClient = new FacebookGraphClient(userAccessToken, FacebookGraphClient.DEFAULT_API_VERSION, 90000)

// With proxy support
def facebookClient = new FacebookGraphClient(userAccessToken, FacebookGraphClient.DEFAULT_API_VERSION, FacebookGraphClient.DEFAULT_READ_TIMEOUT_IN_MS, '192.168.0.10', 8080)
{code}

h3. Fetching Single Objects

{code}
def user = facebookClient.fetchObject("me") // Requires a user access token
def page = facebookClient.fetchObject("cocacola")
println "User name: " + user.name
println "Page likes: " + page.likes
{code}

h3. Fetching Multiple Objects in One Call

{code}
def fetchObjectsResults = facebookClient.fetchObjects(["me", "cocacola"])
println "User name: " + fetchObjectsResults["me"].name
println "Page likes: " + fetchObjectsResults["cocacola"].likes
{code}

h3. Fetching Connections

Make sure that you asked for the corresponding user permissions, e.g. @user_status@ for the feed, @user_photos@ for the photos, etc.

{code}
def myFriends = facebookClient.fetchConnection("me/friends")
def myFeed = facebookClient.fetchConnection("me/feed")
println "Count of my friends: " + myFriends.size()
println "First item in my feed: " + myFeed[0]
{code}

h3. Searching

{code}
// Searching is just a special case of fetching Connections -
// all you have to do is pass along a few extra parameters.
def publicSearch = facebookClient.fetchConnection("search", [q:"watermelon", type:"post"])
println "Public search: " + publicSearch[0].message
// Targeted search
def targetedSearch = facebookClient.fetchConnection("me/home", [q:"Mark", type:"user"])
println "Posts on my wall by friends named Mark: " + targetedSearch.size()
{code}

h3. Fetching Insights

{code}
// Fetching Insights data is as simple as fetching a Connection
def insights = facebookClient.fetchConnection("PAGE_ID/insights")
for (insight in insights) println insight.name
{code}

h3. Executing FQL Queries

{code}
String query = "SELECT uid, name FROM user WHERE uid=220439 or uid=7901103"
def users = facebookClient.executeQuery(query)
println "Users: " + users
{code}

h3. Executing Multiple FQL Queries in One Call

{code}
Map queries = [users:"SELECT uid, name FROM user WHERE uid=220439 OR uid=7901103", likers:"SELECT user_id FROM like WHERE object_id=122788341354"]
multiqueryResults = facebookClient.executeMultiquery(queries)
println "Users: " + multiqueryResults.users
println "People who liked: " + multiqueryResults.likers
{code}

h3. Metadata/Introspection

{code}
// You can specify metadata=1 for many calls, not just this one.
// See the Facebook Graph API documentation for more details.
def userWithMetadata = facebookClient.fetchObject("me", [metadata:1])
println "User connections  " + userWithMetadata.metadata.connections
{code}

h3. Passing Parameters

{code}
// You can pass along any parameters you'd like to the Facebook endpoint.
Date oneWeekAgo = new Date() - 7
def filteredFeed = facebookClient.fetchConnection("me/feed", [limit:3, until:"yesterday", since:oneWeekAgo])
println "Filtered feed count: " + filteredFeed.size()
{code}

h3. Selecting Specific Fields

{code}
def user = facebookClient.fetchObject("me", [fields:"id, name"])
println "User name: " + user.name
{code}

h3. Publishing a Message and Event

{code}
// Publishing a simple message.
def publishMessageResponse = facebookClient.publish("me/feed", [message:"RestFB test"])
println "Published message ID: " + publishMessageResponse.id

// Publishing an event
Date tomorrow = new Date() + 1
Date twoDaysFromNow = new Date() + 2
def publishEventResponse = facebookClient.publish("me/events", [name:"Party", start_time:tomorrow, end_time:twoDaysFromNow])
println "Published event ID: " + publishEventResponse.id
{code}

h3. Publishing a Photo or a Video

{code}
// Publishing an image to a photo album is easy!
// Just specify the image you'd like to upload and RestFB will handle it from there.
def publishPhotoResponse = facebookClient.publish("me/photos", [message, "Test cat"], "/Users/ben/Downloads/cat.png")
println "Published photo ID: " + publishPhotoResponse.id
// Publish a submitted file
def publishPhotoResponse = facebookClient.publish("me/photos", [message, "Test upload"], multipartFile.originalFilename, multipartFile.inputStream)
// Publish an existing remote file by URL
def someUrl = "http://www.google.com/images/logo.gif"
def publishPhotoResponse = facebookClient.publish("me/photos", [message, "Test logo"], "logo.gif", new URL(someUrl).openStream())
println "Published photo ID: " + publishPhotoResponse.id
// Publishing a video works the same way.
facebookClient.publish("me/videos", [message, "Test cat"], "/Users/ben/Downloads/cat.mov")
{code}

h3. Deleting

{code}
Boolean deleted = facebookClient.deleteObject("some object ID")
out.println("Deleted object? " + deleted)
{code}

h3. Using the Batch Request API

{code}
List batchResponses = facebookClient.executeBatch(["me", "m83music/feed"]);
// Responses are ordered to match up with their corresponding requests.
println "Me object " + batchResponses[0]
println "M83 feed " + batchResponses[1]
{code}

h3. Error Handling

All @FacebookClient@ methods may throw @com.restfb.exception.FacebookException@, which is an unchecked exception as of RestFB 1.6.

These are the @FacebookException@ subclasses that you may catch:

* @FacebookJsonMappingException@
* @FacebookNetworkException@
* @FacebookGraphException@
* @FacebookOAuthException@
* @FacebookQueryParseException@
* @FacebookResponseStatusException@

For more info, check "RestFB java library":http://restfb.com/ documentation.